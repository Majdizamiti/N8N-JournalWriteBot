{
  "name": "JournalWriteBot",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.text}}",
        "options": {
          "systemMessage": "=You are a World Bank data specialist. Follow these rules:\\n\\n1. OUTPUT FORMAT:\\n```\\noutput\\n\\ncountry\\n[3-letter ISO code]\\n\\ntopic\\n[employment/unemployment/youth unemployment]\\n\\nindicator\\n[valid WB code]\\n```\\n\\n2. REQUIRED:\\n- Convert country names to 3-letter ISO codes\\n- Use only these indicators:\\n  • Employment: SL.EMP.TOTL\\n  • Unemployment: SL.UEM.TOTL.ZS\\n  • Youth Unemployment: SL.UEM.1524.ZS\\n\\n3. EXAMPLE:\\nInput: \\\"unemployment in Tunisia\\\"\\nOutput:\\n```\\noutput\\n\\ncountry\\nTUN\\n\\ntopic\\nunemployment\\n\\nindicator\\nSL.UEM.TOTL.ZS\\n```\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -64,
        16
      ],
      "id": "df6d85d8-f918-44e4-95f5-2b4532ef7913",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('WhatsApp Trigger') }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        64,
        272
      ],
      "id": "ba7080d8-9719-441b-85be-3fee6e4cb3ac",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -144,
        272
      ],
      "id": "03592c28-64b1-4b6c-b63c-4ee1ca75ae0d",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "KwgjQq48iPrJW7uk",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "## IA Agent  1 \nGets data from the World Bank API.",
        "height": 528,
        "width": 1120,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -352,
        -48
      ],
      "typeVersion": 1,
      "id": "d323db56-4681-45b1-859b-e83fdde75e26",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('AI Agent').item.json.output }}",
        "options": {
          "systemMessage": "=You are a web research agent. Given a country and a topic, your task is to identify 3 to 5 reliable, public URLs for a journalist. The URLs should point to official government or reputable news sites that are likely to contain statistical data. Output the URLs as a single list, with each URL on a new line."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        992,
        16
      ],
      "id": "2db5a240-6cc1-495c-b866-45976c6e7752",
      "name": "AI Agent1",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.url }}",
        "options": {
          "systemMessage": "=Here is an updated system prompt that uses a more structured format with clear Markdown headings and lists. This will result in a cleaner, more predictable output that is easier to read for the journalist.\n\n```\nYou are a helpful statistical analyst. A journalist has provided you with multiple data points on a specific topic. Your task is to analyze this data and provide a summary.\n\n**Instructions:**\n1.  **Estimate the Most Reliable Figure:** Compare the provided values. Prioritize more recent data and official, authoritative sources (e.g., World Bank, government statistical offices). Provide a single, most likely figure.\n2.  **Provide a Range:** List all the different values found from the provided sources.\n3.  **List Sources and Dates:** For each data point, list the source name, the publication link, and the year of the data.\n4.  **Assess Certainty:** State your level of certainty for the estimate (e.g., High, Medium, Low) and provide a brief justification based on the data's consistency and source reliability.\n\n**Output Format:**\nThe output MUST be a single text block using the following Markdown structure:\n\n### Statistical Summary\n**Most Likely Figure:** [Provide the single estimated value here]\n\n**Range of Other Values:**\n- [Value 1]\n- [Value 2]\n- [Value 3]\n\n**Source Links and Dates:**\n- [Source Name] - [Link] ([Year])\n- [Source Name] - [Link] ([Year])\n- [Source Name] - [Link] ([Year])\n\n**Level of Certainty:** [High/Medium/Low]\n[Briefly explain the reason for the certainty level]\n\n**Input Data:**\n{{ $json.yourFormattedDataKey | json }}\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1152,
        672
      ],
      "id": "ec63e496-41ad-4956-8d16-8e809ae2e944",
      "name": "AI Agent2",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1024,
        960
      ],
      "id": "25ee05a9-fa64-4bad-b893-ae84b8d74fc8",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "KwgjQq48iPrJW7uk",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "IA Agent 2\nScrapes data from a specified website",
        "height": 544,
        "width": 848
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        832,
        -48
      ],
      "typeVersion": 1,
      "id": "02d679a0-4f81-4172-8b2e-9b6cbddec34e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "IA Agent 3 \n Analyzes and compares the merged data",
        "height": 544,
        "width": 848,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        880,
        592
      ],
      "typeVersion": 1,
      "id": "6979fc23-24e4-4db4-9395-255b8e335bd7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw text output from the previous node.\nconst rawOutput = $json.output;\n\n// Add a defensive check to make sure the output is a string before processing.\nif (typeof rawOutput !== 'string') {\n  return [{\n    json: {\n      error: \"The output from the previous node was not a text string.\"\n    }\n  }];\n}\n\n// Use regular expressions to extract the values for country and indicator.\nconst countryMatch = rawOutput.match(/country\\s+(\\S+)/i);\nconst indicatorMatch = rawOutput.match(/indicator\\s+(\\S+)/i);\n\nconst countryCode = countryMatch ? countryMatch[1] : null;\nconst indicatorCode = indicatorMatch ? indicatorMatch[1] : null;\n\n// Return a single JSON object with the extracted values.\n// This is the output that your HTTP Request node will reference.\nreturn [{\n  json: {\n    country: countryCode,\n    indicator: indicatorCode,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        16
      ],
      "id": "4ed9d32a-a90b-49a8-b6d6-f405c0977eac",
      "name": "ERROR HANDLING"
    },
    {
      "parameters": {
        "toolDescription": "Fetches economic data from World Bank API",
        "url": "={{ $fromAI('URL', ``, 'string') }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        272,
        256
      ],
      "id": "4a8ceef4-d4a6-4cb4-a5dd-1f155c13fb9c",
      "name": "search_world_bank"
    },
    {
      "parameters": {
        "url": "=https://api.worldbank.org/v2/country/{{ $json.country }}/indicator/{{ $json.indicator }}?format=json ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        512,
        16
      ],
      "id": "56aa7aef-1956-4b87-a830-09afaa5485b6",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        944,
        256
      ],
      "id": "73506afc-9962-49d2-8792-ec2b987e6dda",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "KwgjQq48iPrJW7uk",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the output string from the previous node.\nconst rawUrls = $json.output;\n\n// Split the string by newline characters and filter out any empty lines.\nconst urlList = rawUrls.split('\\n').filter(url => url.trim() !== '');\n\n// Check if the list has more than two items before trimming.\n// This prevents errors on short lists.\nlet trimmedUrlList = urlList;\nif (urlList.length > 2) {\n  // Remove the first and last items from the list using the slice() method.\n  // The first parameter (1) means start at the second item.\n  // The second parameter (-1) means end before the last item.\n  trimmedUrlList = urlList.slice(1, -1);\n}\n\n// Create a new array of n8n items, one for each URL from the trimmed list.\nconst itemsToReturn = trimmedUrlList.map(url => ({\n  json: {\n    url: url.trim(),\n  }\n}));\n\nreturn itemsToReturn;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        16
      ],
      "id": "8c3803ec-3760-4e15-be98-3000913a82c1",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        544,
        672
      ],
      "id": "419fccda-ed75-43f7-963b-a513acf81456",
      "name": "Merge",
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.messageTypes[0] }}",
                    "rightValue": "=text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b828954f-c6d3-48c5-8e5d-86ab115ad5aa"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "33ed3388-d2c1-433c-9064-b2e37831c6d8",
                    "leftValue": "={{ $json.body.messageTypes[0] }}",
                    "rightValue": "=audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b8e7006-bd1e-4b50-ab8f-6e2c06e124e3",
                    "leftValue": "={{ $json.body.messageTypes[0] }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1456,
        256
      ],
      "id": "9d495b69-f787-40e8-aa3c-f72db9431d05",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f4e9263e-1258-4dd9-ba12-39acdf66e6ab",
              "name": "text",
              "value": "={{ $json.body.textMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -848,
        -80
      ],
      "id": "fc5900ea-d49a-4dfb-acc4-b95ba76a7171",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "content": "## Audio Path\n",
        "height": 256,
        "width": 768,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1152,
        224
      ],
      "typeVersion": 1,
      "id": "9a7d51c7-62d0-46ed-91e4-f66281c09777",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d3407d7b-921c-41d6-8e7d-3ad8c39a4952",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1792,
        256
      ],
      "id": "6bff3d7e-9f70-4252-8201-6f6f5dc7a33f",
      "name": "Webhook",
      "webhookId": "d3407d7b-921c-41d6-8e7d-3ad8c39a4952"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2160,
        352
      ],
      "id": "86e0cb9f-65fb-42e7-a0ea-1b27e1bb70cf",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw base64 string from the webhook body.\nconst voiceFile = items[0].json.body.voiceFile;\n\n// Split the string at the comma to remove the 'data:audio/wav;base64,' prefix.\nconst base64Data = voiceFile.split(',')[1];\n\n// Convert the Base64 string to a binary buffer.\nconst buffer = Buffer.from(base64Data, 'base64');\n\n// Return the binary data as a new item. The 'mimeType' is crucial for the next node.\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: buffer,\n      mimeType: 'audio/wav',\n      fileExtension: 'wav'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1072,
        272
      ],
      "id": "0af9f11c-2f87-42b1-bac2-4e7cf097fe61",
      "name": "Code1"
    },
    {
      "parameters": {
        "resource": "speech",
        "operation": "speechToText",
        "file": "=data",
        "additionalOptions": {},
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        -832,
        288
      ],
      "id": "f2968af3-8558-42cb-991b-d386f7f272b9",
      "name": "Transcribe audio or video2",
      "credentials": {
        "elevenLabsApi": {
          "id": "dZfyXt9RObludhNp",
          "name": "ElevenLabs account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "567c35ff-122d-48a6-8889-7e743843ca51",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -624,
        288
      ],
      "id": "4ea5b481-d211-49a2-afc6-1fa5af76ef86",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "output",
              "type": "string",
              "value": "={{ $json.choices[0].message.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "37f06217-8c38-412b-b925-e83792ad2ea9",
      "name": "Get only the text",
      "type": "n8n-nodes-base.set",
      "position": [
        -432,
        608
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Describe this image in great detail\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"data:image/jpeg;base64,{{ $json.data }}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"model\": \"meta-llama/llama-4-scout-17b-16e-instruct\"\n}",
        "options": {}
      },
      "id": "66483362-aba7-4dff-885b-2d5f8d919acd",
      "name": "HTTP Request GROQ LLAVA",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -656,
        608
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "62b680d9-ac09-4dd8-a337-6f242af41621",
      "name": "convert the image file to base64",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -880,
        608
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Get the raw Base64 string from the webhook body.\nconst imageFile = items[0].json.body.imageFile;\n\n// Split the string at the comma to remove the 'data:image/jpeg;base64,' prefix.\nconst [prefix, base64Data] = imageFile.split(',');\n\n// Extract the file extension (e.g., 'jpeg', 'png') from the MIME type.\nconst fileExtension = prefix.match(/\\/([a-zA-Z0-9]+);/)[1];\n\n// Create a unique file name using a timestamp and the extracted extension.\nconst fileName = `image_${Date.now()}.${fileExtension}`;\n\n// Convert the Base64 string to a binary buffer.\nconst buffer = Buffer.from(base64Data, 'base64');\n\n// Return the binary data as a new item, including the new file name.\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: buffer,\n      mimeType: `image/${fileExtension}`,\n      fileExtension: fileExtension,\n      fileName: fileName\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1104,
        608
      ],
      "id": "ab520ebb-dcc8-421e-b112-9964a0ebf521",
      "name": "Code2"
    },
    {
      "parameters": {
        "content": "## Image path\n",
        "height": 256,
        "width": 864,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1168,
        544
      ],
      "typeVersion": 1,
      "id": "a79f49bf-bc74-4a56-acce-93e2914cdbca",
      "name": "Sticky Note4"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "ERROR HANDLING",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "ERROR HANDLING": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search_world_bank": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Transcribe audio or video2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe audio or video2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request GROQ LLAVA": {
      "main": [
        [
          {
            "node": "Get only the text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert the image file to base64": {
      "main": [
        [
          {
            "node": "HTTP Request GROQ LLAVA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "convert the image file to base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ab895b95-5e97-4600-9352-1278aa9865c6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5380752d512acecec1018ea1a6bbbd6a1de13ccb2fa81089d08e342c77ae6c3e"
  },
  "id": "eTcV5hF1Yq2ePYWu",
  "tags": []
}