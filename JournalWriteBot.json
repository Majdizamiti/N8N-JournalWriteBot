{
  "name": "JournalWriteBot",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=You are a World Bank data specialist. Follow these rules:\\n\\n1. OUTPUT FORMAT:\\n```\\noutput\\n\\ncountry\\n[3-letter ISO code]\\n\\ntopic\\n[employment/unemployment/youth unemployment]\\n\\nindicator\\n[valid WB code]\\n```\\n\\n2. REQUIRED:\\n- Convert country names to 3-letter ISO codes\\n- Use only these indicators:\\n  • Employment: SL.EMP.TOTL\\n  • Unemployment: SL.UEM.TOTL.ZS\\n  • Youth Unemployment: SL.UEM.1524.ZS\\n\\n3. EXAMPLE:\\nInput: \\\"unemployment in Tunisia\\\"\\nOutput:\\n```\\noutput\\n\\ncountry\\nTUN\\n\\ntopic\\nunemployment\\n\\nindicator\\nSL.UEM.TOTL.ZS\\n```\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -64,
        16
      ],
      "id": "df6d85d8-f918-44e4-95f5-2b4532ef7913",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$json.text}}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        64,
        272
      ],
      "id": "ba7080d8-9719-441b-85be-3fee6e4cb3ac",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": "llama-3.1-8b-instant",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -144,
        272
      ],
      "id": "03592c28-64b1-4b6c-b63c-4ee1ca75ae0d",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "ciLxLunHpO8eR8lV",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "## IA Agent  1 \nGets data from the World Bank API.",
        "height": 464,
        "width": 1120,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -352,
        -48
      ],
      "typeVersion": 1,
      "id": "d323db56-4681-45b1-859b-e83fdde75e26",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('AI Agent').item.json.output }}",
        "options": {
          "systemMessage": "=You are a web research agent. Given a country and a topic, your task is to identify 3 to 5 reliable, public URLs for a journalist. The URLs should point to official government or reputable news sites that are likely to contain statistical data. Output the URLs as a single list, with each URL on a new line."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        992,
        16
      ],
      "id": "2db5a240-6cc1-495c-b866-45976c6e7752",
      "name": "AI Agent1",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.url }}",
        "options": {
          "systemMessage": "=You are a helpful statistical analyst. A journalist has provided you with multiple data points on a specific topic. Your task is to analyze this data and provide a summary.\n\n**Instructions:**\n1.  **Estimate the Most Reliable Figure:** Compare the provided values. Prioritize more recent data and official, authoritative sources (e.g., World Bank, government statistical offices). Provide a single, most likely figure.\n2.  **Provide a Range:** List all the different values found from the provided sources.\n3.  **List Sources and Dates:** For each data point, list the source name, the publication link, and the year of the data.\n4.  **Assess Certainty:** State your level of certainty for the estimate (e.g., High, Medium, Low) and provide a brief justification based on the data's consistency and source reliability.\n\n**Output Format:**\nThe output MUST be a single text block using the following Markdown structure:\n\n### Statistical Summary\n**Most Likely Figure:** [Provide the single estimated value here]\n\n**Range of Other Values:**\n- [Value 1]\n- [Value 2]\n- [Value 3]\n\n**Source Links and Dates:**\n- [Source Name] - [Link] ([Year])\n- [Source Name] - [Link] ([Year])\n- [Source Name] - [Link] ([Year])\n\n**Level of Certainty:** [High/Medium/Low]\n[Briefly explain the reason for the certainty level]\n\n**Input Data:**\n{{ $json.yourFormattedDataKey | json }}\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1152,
        672
      ],
      "id": "ec63e496-41ad-4956-8d16-8e809ae2e944",
      "name": "AI Agent2",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": "llama-3.1-8b-instant",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1056,
        848
      ],
      "id": "25ee05a9-fa64-4bad-b893-ae84b8d74fc8",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "ciLxLunHpO8eR8lV",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "IA Agent 2\nScrapes data from a specified website",
        "height": 464,
        "width": 848
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        832,
        -48
      ],
      "typeVersion": 1,
      "id": "02d679a0-4f81-4172-8b2e-9b6cbddec34e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "IA Agent 3 \n Analyzes and compares the merged data",
        "height": 368,
        "width": 848,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        880,
        592
      ],
      "typeVersion": 1,
      "id": "6979fc23-24e4-4db4-9395-255b8e335bd7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "toolDescription": "Fetches data from World Bank API",
        "url": "={{ $fromAI('URL', ``, 'string') }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        272,
        256
      ],
      "id": "4a8ceef4-d4a6-4cb4-a5dd-1f155c13fb9c",
      "name": "search_world_bank"
    },
    {
      "parameters": {
        "url": "=https://api.worldbank.org/v2/country/{{ $json.country }}/indicator/{{ $json.indicator }}?format=json ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        512,
        16
      ],
      "id": "56aa7aef-1956-4b87-a830-09afaa5485b6",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "model": "llama-3.1-8b-instant",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        944,
        256
      ],
      "id": "73506afc-9962-49d2-8792-ec2b987e6dda",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "ciLxLunHpO8eR8lV",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the output string from the previous node.\nconst rawUrls = $json.output;\n\n// Split the string by newline characters and filter out any empty lines.\nconst urlList = rawUrls.split('\\n').filter(url => url.trim() !== '');\n\n// Check if the list has more than two items before trimming.\n// This prevents errors on short lists.\nlet trimmedUrlList = urlList;\nif (urlList.length > 2) {\n  // Remove the first and last items from the list using the slice() method.\n  // The first parameter (1) means start at the second item.\n  // The second parameter (-1) means end before the last item.\n  trimmedUrlList = urlList.slice(1, -1);\n}\n\n// Create a new array of n8n items, one for each URL from the trimmed list.\nconst itemsToReturn = trimmedUrlList.map(url => ({\n  json: {\n    url: url.trim(),\n  }\n}));\n\nreturn itemsToReturn;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        16
      ],
      "id": "8c3803ec-3760-4e15-be98-3000913a82c1",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        544,
        672
      ],
      "id": "419fccda-ed75-43f7-963b-a513acf81456",
      "name": "Merge",
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.messageTypes[0] }}",
                    "rightValue": "=text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b828954f-c6d3-48c5-8e5d-86ab115ad5aa"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "33ed3388-d2c1-433c-9064-b2e37831c6d8",
                    "leftValue": "={{ $json.body.messageTypes[0] }}",
                    "rightValue": "=audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b8e7006-bd1e-4b50-ab8f-6e2c06e124e3",
                    "leftValue": "={{ $json.body.messageTypes[0] }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1456,
        256
      ],
      "id": "9d495b69-f787-40e8-aa3c-f72db9431d05",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f4e9263e-1258-4dd9-ba12-39acdf66e6ab",
              "name": "text",
              "value": "={{ $json.body.textMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -912,
        -16
      ],
      "id": "fc5900ea-d49a-4dfb-acc4-b95ba76a7171",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "content": "## Audio Path\n",
        "height": 240,
        "width": 768,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1152,
        224
      ],
      "typeVersion": 1,
      "id": "9a7d51c7-62d0-46ed-91e4-f66281c09777",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d3407d7b-921c-41d6-8e7d-3ad8c39a4952",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1632,
        272
      ],
      "id": "6bff3d7e-9f70-4252-8201-6f6f5dc7a33f",
      "name": "Webhook",
      "webhookId": "d3407d7b-921c-41d6-8e7d-3ad8c39a4952"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1792,
        368
      ],
      "id": "86e0cb9f-65fb-42e7-a0ea-1b27e1bb70cf",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw base64 string from the webhook body.\nconst voiceFile = items[0].json.body.voiceFile;\n\n// Split the string at the comma to remove the 'data:audio/wav;base64,' prefix.\nconst base64Data = voiceFile.split(',')[1];\n\n// Convert the Base64 string to a binary buffer.\nconst buffer = Buffer.from(base64Data, 'base64');\n\n// Return the binary data as a new item. The 'mimeType' is crucial for the next node.\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: buffer,\n      mimeType: 'audio/wav',\n      fileExtension: 'wav'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1056,
        288
      ],
      "id": "0af9f11c-2f87-42b1-bac2-4e7cf097fe61",
      "name": "Code1"
    },
    {
      "parameters": {
        "resource": "speech",
        "operation": "speechToText",
        "file": "=data",
        "additionalOptions": {},
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        -832,
        288
      ],
      "id": "f2968af3-8558-42cb-991b-d386f7f272b9",
      "name": "Transcribe audio or video2",
      "credentials": {
        "elevenLabsApi": {
          "id": "dZfyXt9RObludhNp",
          "name": "ElevenLabs account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "567c35ff-122d-48a6-8889-7e743843ca51",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -624,
        288
      ],
      "id": "4ea5b481-d211-49a2-afc6-1fa5af76ef86",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "content": "## Image path\n",
        "height": 304,
        "width": 1040
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1136,
        544
      ],
      "typeVersion": 1,
      "id": "a79f49bf-bc74-4a56-acce-93e2914cdbca",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw text output from the previous node.\nconst rawOutput = $json.output;\n\n// Add a defensive check to make sure the output is a string before processing.\nif (typeof rawOutput !== 'string') {\n  return [{\n    json: {\n      error: \"The output from the previous node was not a text string.\"\n    }\n  }];\n}\n\n// Use regular expressions to extract the values for country and indicator.\nconst countryMatch = rawOutput.match(/country\\s+(\\S+)/i);\nconst indicatorMatch = rawOutput.match(/indicator\\s+(\\S+)/i);\n\nconst countryCode = countryMatch ? countryMatch[1] : null;\nconst indicatorCode = indicatorMatch ? indicatorMatch[1] : null;\n\n// Return a single JSON object with the extracted values.\n// This is the output that your HTTP Request node will reference.\nreturn [{\n  json: {\n    country: countryCode,\n    indicator: indicatorCode,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        16
      ],
      "id": "4ed9d32a-a90b-49a8-b6d6-f405c0977eac",
      "name": "Data Divide"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced data preprocessing for research workflow\nconst body = items[0].json.body || items[0].json;\n\n// Extract and validate research parameters\nconst researchPrompt = body.researchPrompt || '';\nconst researchDepth = body.researchDepth || 'comprehensive'; // quick, detailed, comprehensive\nconst researchFocus = body.researchFocus || 'auto'; // historical, technical, cultural, functional\n\n// Validate image data\nconst imageFile = body.imageFile || body.data || body.file;\nif (!imageFile) {\n    throw new Error('No image file provided. Please include imageFile in your payload.');\n}\n\n// Prepare enhanced research context\nconst researchContext = {\n    researchPrompt: researchPrompt,\n    researchDepth: researchDepth,\n    researchFocus: researchFocus,\n    timestamp: new Date().toISOString(),\n    originalData: {\n        messageTypes: body.messageTypes || [],\n        hasImage: !!imageFile\n    }\n};\n\nreturn [{\n    json: {\n        ...body,\n        ...researchContext,\n        imageFile: imageFile\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        608
      ],
      "id": "24d00901-c81b-4364-91e9-3a352d1441a4",
      "name": "Preprocess Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "output",
              "type": "string",
              "value": "={{ $json.research_output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "860ddd69-9cd6-40be-b896-03e9c69c8e86",
      "name": "Format Research Output",
      "type": "n8n-nodes-base.set",
      "position": [
        -240,
        608
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a expert research analyst specializing in image-based research. Provide comprehensive, factual analysis with historical context, technical details, cultural significance, and practical implications. Structure your response with clear sections and provide depth based on the research parameters.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"RESEARCH PARAMETERS:\\n- Depth: {{ $json.researchDepth }}\\n- Focus: {{ $json.researchFocus }}\\n- Prompt: {{ $json.researchPrompt || 'Conduct comprehensive research analysis of this image covering historical context, technical aspects, cultural significance, and practical implications. Provide detailed, factual information with insights that would be valuable for academic or professional research purposes.' }}\\n\\nPlease analyze this image and provide a research-grade response:\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"data:image/jpeg;base64,{{ $json.data }}\",\n            \"detail\": \"high\"\n          }\n        }\n      ]\n    }\n  ],\n  \"model\": \"meta-llama/llama-4-scout-17b-16e-instruct\",\n  \"max_tokens\": 4000,\n  \"temperature\": 0.1\n}",
        "options": {}
      },
      "id": "09dc32ba-11b2-43e4-9bc5-fed0c02bd1ed",
      "name": "Advanced Research Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -560,
        608
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "0bd9ddc9-9bac-4dff-88a2-cfbb1d2680b0",
      "name": "Convert Image to Base64",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -736,
        608
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Robust image processing for research workflow\nconst body = items[0].json;\nconst imageFile = body.imageFile;\n\nif (!imageFile) {\n    throw new Error('Image data missing. Please provide imageFile in base64 format.');\n}\n\n// Handle both data URI and raw base64\nlet base64Data, mimeType, fileExtension;\n\nif (imageFile.includes('data:image/')) {\n    const [prefix, data] = imageFile.split(',');\n    base64Data = data;\n    \n    const mimeMatch = prefix.match(/image\\/([a-zA-Z0-9]+);?/);\n    fileExtension = mimeMatch ? mimeMatch[1] : 'jpeg';\n    mimeType = `image/${fileExtension}`;\n} else {\n    base64Data = imageFile;\n    fileExtension = 'jpeg';\n    mimeType = 'image/jpeg';\n}\n\n// Create research identifier\nconst researchId = `research_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Convert to buffer\nconst buffer = Buffer.from(base64Data, 'base64');\n\n// Return with research metadata\nreturn [{\n    json: {\n        researchPrompt: body.researchPrompt || '',\n        researchDepth: body.researchDepth || 'comprehensive',\n        researchFocus: body.researchFocus || 'auto',\n        researchId: researchId,\n        originalFileName: `${researchId}.${fileExtension}`,\n        processedAt: new Date().toISOString()\n    },\n    binary: {\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileExtension: fileExtension,\n            fileName: `${researchId}.${fileExtension}`\n        }\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        608
      ],
      "id": "c4ffc648-0dbe-4e47-9d37-787947032071",
      "name": "Research Image Processor"
    },
    {
      "parameters": {
        "jsCode": "// Process API response and create research metadata\nconst response = items[0].json;\n\nreturn [{\n    json: {\n        research_output: response.choices[0].message.content,\n        research_metadata: {\n            model: response.model,\n            completion_tokens: response.usage?.completion_tokens || 0,\n            total_tokens: response.usage?.total_tokens || 0,\n            research_timestamp: new Date().toISOString()\n        },\n        // Pass through original research parameters\n        researchPrompt: response.researchPrompt,\n        researchDepth: response.researchDepth,\n        researchFocus: response.researchFocus,\n        researchId: response.researchId\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        608
      ],
      "id": "298c5a09-d176-485c-8ff1-15227127d943",
      "name": "Research Metadata Processor"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Data Divide",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "search_world_bank": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preprocess Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Transcribe audio or video2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe audio or video2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Divide": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preprocess Data": {
      "main": [
        [
          {
            "node": "Research Image Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Research Output": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Advanced Research Analysis": {
      "main": [
        [
          {
            "node": "Research Metadata Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Image to Base64": {
      "main": [
        [
          {
            "node": "Advanced Research Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Image Processor": {
      "main": [
        [
          {
            "node": "Convert Image to Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Metadata Processor": {
      "main": [
        [
          {
            "node": "Format Research Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "369ef5a9-fc98-4232-9b3f-1e2acf18e632",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5380752d512acecec1018ea1a6bbbd6a1de13ccb2fa81089d08e342c77ae6c3e"
  },
  "id": "eTcV5hF1Yq2ePYWu",
  "tags": []
}
